                                                            Compiler all Experiments
1. Lex Program
%{
int count = 0;
%}
%%
[A-Z] {printf(&quot;%s is a capital letter&quot;,yytext);
count++;
}
. {printf(&quot;%s is not a capital letter&quot;,yytext);}
\n {return 0;}
%%
int yywrap(){}
int main()
{
yylex();
printf(&quot;%d letters are capital&quot;, count);
return 0;
}

                                                                2 . Lex Program for Calculator

%{
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int op = 0, i;
float a, b;
void digi();
%}
dig [0-9]+|([0-9]*)&quot;.&quot;([0-9]+)
add &quot;+&quot;
sub &quot;-&quot;
mul &quot;*&quot;
div &quot;/&quot;

pow &quot;^&quot;
ln \n
%%
{dig} {digi();}
{add} {op = 1;}
{sub} {op = 2;}
{mul} {op = 3;}
{div} {op = 4;}
{pow} {op = 5;}
{ln} {printf(&quot;\n The Answer :%f\n\n&quot;, a);}

%%
void digi()
{
    if (op == 0)
        a = atof(yytext);
    else
    {
        b = atof(yytext);
        switch (op)
        {
        case 1:
            a = a + b;
            break;
        case 2:
            a = a - b;
            break;
        case 3:
            a = a * b;
            break;
        case 4:
            a = a / b;

            break;
        case 5:
            for (i = a; b &gt; 1; b--)
                a = a * i;
            break;
        }
        op = 0;
    }
}
int main(int argc, char *argv[])
{
    yylex();
    return 0;
}
int yywrap()
{
    return 1;
}

                                                                                            Q..Lex Program taking input from File
%{
#include &lt;stdio.h&gt;
int countCapital = 0;
int countDigits = 0;
%}
%%
[A-Z] {
    printf(&quot;%s is a capital letter\n&quot;, yytext);
    countCapital++;
}
[0-9] {
    printf(&quot;%s is a digit\n&quot;, yytext);
    countDigits++;
}

. {
    printf(&quot;%s is not a capital letter or digit\n&quot;, yytext);
}
\n {
    printf(&quot;Total capital letters: %d\n&quot;, countCapital);
    printf(&quot;Total digits: %d\n&quot;, countDigits);
    return 0;
}
%%
int yywrap() {}
int main(int argc, char *argv[]) {
   
    FILE *inputFile = fopen(&quot;input.txt&quot;, &quot;r&quot;);
   
    yyin = inputFile; // Set the file pointer for flex to read from
    yylex();
    fclose(inputFile);
    return 0;
}
Commands
~$ lex SimpleLex.l
~$ gcc lex.yy.c
~$ ./a.out

                                                                                              4. Calculator Using Lex and Yacc
Lex Code
%{

#include&lt;stdio.h&gt;
#include &quot;y.tab.h&quot;
extern int yylval;
%}

%%
[0-9]+ {
          yylval=atoi(yytext);
          return NUMBER;
       }
[\t] ;
[\n] return 0;
. return yytext[0];
%%
int yywrap()
{
return 1;
}

Yacc Code
%{
    #include&lt;stdio.h&gt;
    int flag=0;
   

%}
%token NUMBER

%left &#39;+&#39; &#39;-&#39;
%left &#39;*&#39; &#39;/&#39; &#39;%&#39;
%left &#39;(&#39; &#39;)&#39;
%%
ArithmeticExpression: E{
         printf(&quot;\nResult=%d\n&quot;,$$);
         return 0;
        };
E:E&#39;+&#39;E {$$=$1+$3;}
 |E&#39;-&#39;E {$$=$1-$3;}
 |E&#39;*&#39;E {$$=$1*$3;}
 |E&#39;/&#39;E {$$=$1/$3;}
 |E&#39;%&#39;E {$$=$1%$3;}
 |&#39;(&#39;E&#39;)&#39; {$$=$2;}
 | NUMBER {$$=$1;}
;
%%

void main()
{

   printf(&quot;\nEnter Any Arithmetic Expression which can have operations Addition, Subtraction,
Multiplication, Divison, Modulus and Round brackets:\n&quot;);
   yyparse();
  if(flag==0)
   printf(&quot;\nEntered arithmetic expression is Valid\n\n&quot;);
 
}
void yyerror()
{
   printf(&quot;\nEntered arithmetic expression is Invalid\n\n&quot;);
   flag=1;
}

Commands
yacc -d filename.y
lex filename.l
gcc lex.yy.c y.tab.c -w
./a.out

                                                                                      5. Code for removing Left Recursion
#include&lt;stdio.h&gt;
#include&lt;string.h&gt;
void main() {
char input[100],l[50],r[50],temp[10],tempprod[20],productions[25][50];
int i=0,j=0,flag=0,consumed=0;
printf(&quot;Enter the productions: &quot;);

scanf(&quot;%1s-&gt;%s&quot;,l,r);
printf(&quot;%s&quot;,r);
while(sscanf(r+consumed,&quot;%[^|]s&quot;,temp) == 1 &amp;&amp; consumed &lt;= strlen(r)) {
if(temp[0] == l[0]) {
flag = 1;
sprintf(productions[i++], &quot;%s-&gt;%s%s&#39;&quot;, l, temp+1, l);
}
else
sprintf(productions[i++], &quot;%s&#39;-&gt;%s%s&#39;&quot;, l, temp, l);
consumed += strlen(temp)+1;
}
if(flag == 1) {
sprintf(productions[i++], &quot;%s-&gt;ε&quot;, l);
printf(&quot;The productions after eliminating Left Recursion are:\n&quot;);
for(j=0;j&lt;i;j++)
printf(&quot;%s\n&quot;,productions[j]);
}
else
printf(&quot;The Given Grammar has no Left Recursion&quot;);
}
Commands:
gcc Sample.c
~$ ./a.out
Input: E-&gt;E+E/T

                                                                                                    6. Left Factoring
#include&lt;stdio.h&gt;

#include&lt;string.h&gt;
int main()
{
char gram[20],part1[20],part2[20],modifiedGram[20],newGram[20],tempGram[20];
int i,j=0,k=0,l=0,pos;
printf(&quot;Enter Production : A-&gt;&quot;);
gets(gram);
for(i=0;gram[i]!=&#39;|&#39;;i++,j++)
part1[j]=gram[i];
part1[j]=&#39;\0&#39;;
for(j=++i,i=0;gram[j]!=&#39;\0&#39;;j++,i++)
part2[i]=gram[j];
part2[i]=&#39;\0&#39;;
for(i=0;i&lt;strlen(part1)||i&lt;strlen(part2);i++)
{
if(part1[i]==part2[i])
{
modifiedGram[k]=part1[i];
k++;
pos=i+1;
}
}
for(i=pos,j=0;part1[i]!=&#39;\0&#39;;i++,j++){
newGram[j]=part1[i];
}
newGram[j++]=&#39;|&#39;;
for(i=pos;part2[i]!=&#39;\0&#39;;i++,j++){

newGram[j]=part2[i];
}
modifiedGram[k]=&#39;X&#39;;
modifiedGram[++k]=&#39;\0&#39;;
newGram[j]=&#39;\0&#39;;
printf(&quot;\n A-&gt;%s&quot;,modifiedGram);
printf(&quot;\n X-&gt;%s\n&quot;,newGram);
}
Commands And Input
~$ gcc Sample.c
~$ ./a.out
Enter Production : A-&gt;aE+bcD|aE+eIT

A-&gt;aE+X
X-&gt;bcD|eIT

                                                                                                  First and Follow

// C program to calculate the First and
// Follow sets of a given grammar
#include &lt;ctype.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

// Functions to calculate Follow
void followfirst(char, int, int);
void follow(char c);

// Function to calculate First
void findfirst(char, int, int);

int count, n = 0;

// Stores the final result
// of the First Sets
char calc_first[10][100];

// Stores the final result
// of the Follow Sets
char calc_follow[10][100];
int m = 0;

// Stores the production rules
char production[10][10];
char f[10], first[10];
int k;
char ck;
int e;

int main(int argc, char** argv)
{
int jm = 0;
int km = 0;
int i, choice;

char c, ch;
count = 8;

// The Input grammar
strcpy(production[0], &quot;X=TnS&quot;);
strcpy(production[1], &quot;X=Rm&quot;);
strcpy(production[2], &quot;T=q&quot;);
strcpy(production[3], &quot;T=#&quot;);
strcpy(production[4], &quot;S=p&quot;);
strcpy(production[5], &quot;S=#&quot;);
strcpy(production[6], &quot;R=om&quot;);
strcpy(production[7], &quot;R=ST&quot;);

int kay;
char done[count];
int ptr = -1;

// Initializing the calc_first array
for (k = 0; k &lt; count; k++) {
for (kay = 0; kay &lt; 100; kay++) {
calc_first[k][kay] = &#39;!&#39;;
}
}
int point1 = 0, point2, xxx;

for (k = 0; k &lt; count; k++) {
c = production[k][0];

point2 = 0;
xxx = 0;

// Checking if First of c has
// already been calculated
for (kay = 0; kay &lt;= ptr; kay++)
if (c == done[kay])
xxx = 1;

if (xxx == 1)
continue;

// Function call
findfirst(c, 0, 0);
ptr += 1;

// Adding c to the calculated list
done[ptr] = c;
printf(&quot;\n First(%c) = { &quot;, c);
calc_first[point1][point2++] = c;

// Printing the First Sets of the grammar
for (i = 0 + jm; i &lt; n; i++) {
int lark = 0, chk = 0;

for (lark = 0; lark &lt; point2; lark++) {

if (first[i] == calc_first[point1][lark]) {
chk = 1;
break;
}
}
if (chk == 0) {
printf(&quot;%c, &quot;, first[i]);
calc_first[point1][point2++] = first[i];
}
}
printf(&quot;}\n&quot;);
jm = n;
point1++;
}
printf(&quot;\n&quot;);
printf(&quot;-----------------------------------------------&quot;
&quot;\n\n&quot;);
char donee[count];
ptr = -1;

// Initializing the calc_follow array
for (k = 0; k &lt; count; k++) {
for (kay = 0; kay &lt; 100; kay++) {
calc_follow[k][kay] = &#39;!&#39;;
}
}
point1 = 0;

int land = 0;
for (e = 0; e &lt; count; e++) {
ck = production[e][0];
point2 = 0;
xxx = 0;

// Checking if Follow of ck
// has already been calculated
for (kay = 0; kay &lt;= ptr; kay++)
if (ck == donee[kay])
xxx = 1;

if (xxx == 1)
continue;
land += 1;

// Function call
follow(ck);
ptr += 1;

// Adding ck to the calculated list
donee[ptr] = ck;
printf(&quot; Follow(%c) = { &quot;, ck);
calc_follow[point1][point2++] = ck;

// Printing the Follow Sets of the grammar
for (i = 0 + km; i &lt; m; i++) {

int lark = 0, chk = 0;
for (lark = 0; lark &lt; point2; lark++) {
if (f[i] == calc_follow[point1][lark]) {
chk = 1;
break;
}
}
if (chk == 0) {
printf(&quot;%c, &quot;, f[i]);
calc_follow[point1][point2++] = f[i];
}
}
printf(&quot; }\n\n&quot;);
km = m;
point1++;
}
}

void follow(char c)
{
int i, j;

// Adding &quot;$&quot; to the follow
// set of the start symbol
if (production[0][0] == c) {
f[m++] = &#39;$&#39;;
}

for (i = 0; i &lt; 10; i++) {
for (j = 2; j &lt; 10; j++) {
if (production[i][j] == c) {
if (production[i][j + 1] != &#39;\0&#39;) {
// Calculate the first of the next
// Non-Terminal in the production
followfirst(production[i][j + 1], i,
(j + 2));

}

if (production[i][j + 1] == &#39;\0&#39;
&amp;&amp; c != production[i][0]) {
// Calculate the follow of the
// Non-Terminal in the L.H.S. of the
// production
follow(production[i][0]);
}
}
}
}
}

void findfirst(char c, int q1, int q2)
{
int j;

// The case where we

// encounter a Terminal
if (!(isupper(c))) {
first[n++] = c;
}
for (j = 0; j &lt; count; j++) {
if (production[j][0] == c) {
if (production[j][2] == &#39;#&#39;) {
if (production[q1][q2] == &#39;\0&#39;)
first[n++] = &#39;#&#39;;
else if (production[q1][q2] != &#39;\0&#39;
&amp;&amp; (q1 != 0 || q2 != 0)) {
// Recursion to calculate First of New
// Non-Terminal we encounter after
// epsilon
findfirst(production[q1][q2], q1,
(q2 + 1));

}
else
first[n++] = &#39;#&#39;;

}
else if (!isupper(production[j][2])) {
first[n++] = production[j][2];
}
else {
// Recursion to calculate First of
// New Non-Terminal we encounter
// at the beginning

findfirst(production[j][2], j, 3);
}
}
}
}

void followfirst(char c, int c1, int c2)
{
int k;

// The case where we encounter
// a Terminal
if (!(isupper(c)))
f[m++] = c;
else {
int i = 0, j = 1;
for (i = 0; i &lt; count; i++) {
if (calc_first[i][0] == c)
break;

}

// Including the First set of the
// Non-Terminal in the Follow of
// the original query
while (calc_first[i][j] != &#39;!&#39;) {
if (calc_first[i][j] != &#39;#&#39;) {
f[m++] = calc_first[i][j];

}
else {
if (production[c1][c2] == &#39;\0&#39;) {
// Case where we reach the
// end of a production
follow(production[c1][0]);
}
else {
// Recursion to the next symbol
// in case we encounter a &quot;#&quot;
followfirst(production[c1][c2], c1,
c2 + 1);

}
}
j++;
}
}
}

                                                                                                Left Factoring

#include&lt;stdio.h&gt;
#include&lt;string.h&gt;
int main()
{
char gram[20],part1[20],part2[20],modifiedGram[20],newGram[20],tempGram[20];
int i,j=0,k=0,l=0,pos;

printf(&quot;Enter Production : A-&gt;&quot;);
gets(gram);
for(i=0;gram[i]!=&#39;|&#39;;i++,j++)
part1[j]=gram[i];
part1[j]=&#39;\0&#39;;
for(j=++i,i=0;gram[j]!=&#39;\0&#39;;j++,i++)
part2[i]=gram[j];
part2[i]=&#39;\0&#39;;
for(i=0;i&lt;strlen(part1)||i&lt;strlen(part2);i++)
{
if(part1[i]==part2[i])
{
modifiedGram[k]=part1[i];
k++;
pos=i+1;
}
}
for(i=pos,j=0;part1[i]!=&#39;\0&#39;;i++,j++){
newGram[j]=part1[i];
}
newGram[j++]=&#39;|&#39;;
for(i=pos;part2[i]!=&#39;\0&#39;;i++,j++){
newGram[j]=part2[i];
}
modifiedGram[k]=&#39;X&#39;;
modifiedGram[++k]=&#39;\0&#39;;
newGram[j]=&#39;\0&#39;;

printf(&quot;\n A-&gt;%s&quot;,modifiedGram);
printf(&quot;\n X-&gt;%s\n&quot;,newGram);
}
Commands
~$ gcc Sample.c
~$ ./a.out

                                                                                              Predictive Parsing Table
#include&lt;iostream&gt;
#include&lt;string&gt;
#include&lt;deque&gt;
using namespace std;
int n,n1,n2;
int getPosition(string arr[], string q, int size)
{
   for(int i=0;i&lt;size;i++)
   {
       if(q == arr[i])
           return i;
   }
   return -1;
}
int main()
{
   string
prods[10],first[10],follow[10],nonterms[10],terms[10];
   string pp_table[20][20] = {};
   cout&lt;&lt;&quot;Enter the number of productions : &quot;;
   cin&gt;&gt;n;

   cin.ignore();
   cout&lt;&lt;&quot;Enter the productions&quot;&lt;&lt;endl;
   for(int i=0;i&lt;n;i++)
   {
       getline(cin,prods[i]);
       cout&lt;&lt;&quot;Enter first for &quot;&lt;&lt;prods[i].substr(3)&lt;&lt;&quot; : &quot;;
       getline(cin,first[i]);
   }
   cout&lt;&lt;&quot;Enter the number of Terminals : &quot;;
   cin&gt;&gt;n2;
   cin.ignore();
   cout&lt;&lt;&quot;Enter the Terminals&quot;&lt;&lt;endl;
   for(int i=0;i&lt;n2;i++)
   {
       cin&gt;&gt;terms[i];
   }
   terms[n2] = &quot;$&quot;;
   n2++;
   cout&lt;&lt;&quot;Enter the number of Non-Terminals : &quot;;
   cin&gt;&gt;n1;
   cin.ignore();
   for(int i=0;i&lt;n1;i++)
   {
       cout&lt;&lt;&quot;Enter Non-Terminal : &quot;;
       getline(cin,nonterms[i]);
       cout&lt;&lt;&quot;Enter follow of &quot;&lt;&lt;nonterms[i]&lt;&lt;&quot; : &quot;;
       getline(cin,follow[i]);
   }

   cout&lt;&lt;endl;
   cout&lt;&lt;&quot;Grammar&quot;&lt;&lt;endl;

   for(int i=0;i&lt;n;i++)
   {
       cout&lt;&lt;prods[i]&lt;&lt;endl;
   }

   for(int j=0;j&lt;n;j++)
   {
       int row =
getPosition(nonterms,prods[j].substr(0,1),n1);
       if(prods[j].at(3)!=&#39;#&#39;)
       {
           for(int i=0;i&lt;first[j].length();i++)
           {
               int col = getPosition(terms,first[j].substr(i,1),n2);
               pp_table[row][col] = prods[j];
           }
       }
       else
       {
           for(int i=0;i&lt;follow[row].length();i++)
           {
               int col =
getPosition(terms,follow[row].substr(i,1),n2);
               pp_table[row][col] = prods[j];
           }
       }
   }
   //Display Table
   for(int j=0;j&lt;n2;j++)
       cout&lt;&lt;&quot;\t&quot;&lt;&lt;terms[j];
   cout&lt;&lt;endl;

   for(int i=0;i&lt;n1;i++)
   {
           cout&lt;&lt;nonterms[i]&lt;&lt;&quot;\t&quot;;
           //Display Table
           for(int j=0;j&lt;n2;j++)
           {
               cout&lt;&lt;pp_table[i][j]&lt;&lt;&quot;\t&quot;;
           }
           cout&lt;&lt;endl;
   }
   //Parsing String
   char c;
   do{
   string ip;
   deque&lt;string&gt; pp_stack;
   pp_stack.push_front(&quot;$&quot;);
   pp_stack.push_front(prods[0].substr(0,1));
   cout&lt;&lt;&quot;Enter the string to be parsed : &quot;;
   getline(cin,ip);
   ip.push_back(&#39;$&#39;);
   cout&lt;&lt;&quot;Stack\tInput\tAction&quot;&lt;&lt;endl;
   while(true)
   {
       for(int i=0;i&lt;pp_stack.size();i++)
           cout&lt;&lt;pp_stack[i];
       cout&lt;&lt;&quot;\t&quot;&lt;&lt;ip&lt;&lt;&quot;\t&quot;;
       int row1 = getPosition(nonterms,pp_stack.front(),n1);
       int row2 = getPosition(terms,pp_stack.front(),n2);
       int column = getPosition(terms,ip.substr(0,1),n2);
       if(row1 != -1 &amp;&amp; column != -1)
       {

           string p = pp_table[row1][column];
           if(p.empty())
           {
               cout&lt;&lt;endl&lt;&lt;&quot;String cannot be Parsed.&quot;&lt;&lt;endl;
               break;
           }
           pp_stack.pop_front();
           if(p[3] != &#39;#&#39;)
           {
               for(int x=p.size()-1;x&gt;2;x--)
               {
                   pp_stack.push_front(p.substr(x,1));
               }
           }
           cout&lt;&lt;p;
       }
       else
       {
           if(ip.substr(0,1) == pp_stack.front())
           {
               if(pp_stack.front() == &quot;$&quot;)
               {
                   cout&lt;&lt;endl&lt;&lt;&quot;String Parsed.&quot;&lt;&lt;endl;
                   break;
               }
               cout&lt;&lt;&quot;Match &quot;&lt;&lt;ip[0];
               pp_stack.pop_front();
               ip = ip.substr(1);
           }
           else
           {

               cout&lt;&lt;endl&lt;&lt;&quot;String cannot be Parsed.&quot;&lt;&lt;endl;
               break;
           }
       }
       cout&lt;&lt;endl;
   }
   cout&lt;&lt;&quot;Continue?(Y/N) &quot;;
   cin&gt;&gt;c;
   cin.ignore();
   }while(c==&#39;y&#39; || c==&#39;Y&#39;);
   return 0;
}
Commands:
~$ g++ Sample.cpp
~$ ./a.out
Enter the Input
Enter the number of productions : 5
Enter the productions
S-&gt;aXYb
Enter first for aXYb : a
X-&gt;c
Enter first for c : c
X-&gt;#
Enter first for # : #
Y-&gt;d
Enter first for d : d
Y-&gt;#
Enter first for # : #
Enter the number of Terminals : 4
Enter the Terminals
a
b
c
d
Enter the number of Non-Terminals : 3
Enter Non-Terminal : S
Enter follow of S : $
Enter Non-Terminal : X

Enter follow of X : bd
Enter Non-Terminal : Y
Enter follow of Y : b
Grammar
S-&gt;aXYb
X-&gt;c
X-&gt;#
Y-&gt;d
Y-&gt;#
a b c d $
S S-&gt;aXYb
X X-&gt;# X-&gt;c X-&gt;#
Y Y-&gt;# Y-&gt;d
Enter the string to be parsed : acdb
Stack Input Action
S$ acdb$ S-&gt;aXYb
aXYb$ acdb$ Match a
XYb$ cdb$ X-&gt;c
cYb$ cdb$ Match c
Yb$ db$ Y-&gt;d
db$ db$ Match d
b$ b$ Match b
$ $
String Parsed.
                                                                                          Intermediate Code Generation

#include&lt;stdio.h&gt;
#include&lt;ctype.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;
void small();
void dove(int i);
int p[5]={0,1,2,3,4},c=1,i,k,l,m,pi;
char sw[5]={&#39;=&#39;,&#39;-&#39;,&#39;+&#39;,&#39;/&#39;,&#39;*&#39;},j[20],a[5],b[5],ch[2];
void main()

{
printf(&quot;Enter the expression:&quot;);
scanf(&quot;%s&quot;,j);
printf(&quot;\tThe Intermediate code is:\n&quot;);
small();
}
void dove(int i)
{
a[0]=b[0]=&#39;\0&#39;;
if(!isdigit(j[i+2])&amp;&amp;!isdigit(j[i-2]))
{
a[0]=j[i-1];
b[0]=j[i+1];
}
if(isdigit(j[i+2])){
a[0]=j[i-1];
b[0]=&#39;t&#39;;
b[1]=j[i+2];
}
if(isdigit(j[i-2]))
{
b[0]=j[i+1];
a[0]=&#39;t&#39;;
a[1]=j[i-2];
b[1]=&#39;\0&#39;;
}
if(isdigit(j[i+2]) &amp;&amp;isdigit(j[i-2]))

{
a[0]=&#39;t&#39;;
b[0]=&#39;t&#39;;
a[1]=j[i-2];
b[1]=j[i+2];
sprintf(ch,&quot;%d&quot;,c);
j[i+2]=j[i-2]=ch[0];
}
if(j[i]==&#39;*&#39;)
printf(&quot;\tt%d=%s*%s\n&quot;,c,a,b);
if(j[i]==&#39;/&#39;)
printf(&quot;\tt%d=%s/%s\n&quot;,c,a,b);
if(j[i]==&#39;+&#39;)
printf(&quot;\tt%d=%s+%s\n&quot;,c,a,b);if(j[i]==&#39;-&#39;)
printf(&quot;\tt%d=%s-%s\n&quot;,c,a,b);
if(j[i]==&#39;=&#39;)
printf(&quot;\t%c=t%d&quot;,j[i-1],--c);
sprintf(ch,&quot;%d&quot;,c);
j[i]=ch[0];
c++;
small();
}
void small()
{
pi=0;l=0;
for(i=0;i&lt;strlen(j);i++)
{

for(m=0;m&lt;5;m++)
if(j[i]==sw[m])
if(pi&lt;=p[m])
{
pi=p[m];
l=1;
k=i;
}
}
if(l==1)
dove(k);
else
exit(0);}
Commands:
~$ gcc exp10.c
~$ ./a.out
Input:
Enter the expression:A=B+C-D
